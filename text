# CELL 3 — parse date & time and create kickoff datetime (robustly)
# date
if 'date' in df.columns:
    df['date'] = pd.to_datetime(df['date'], dayfirst=True, errors='coerce')
else:
    df['date'] = pd.NaT

# time: basic normalization (keep as string if not parseable)
if 'time' in df.columns:
    df['time'] = df['time'].astype(str).str.strip().replace('nan', np.nan)
    # remove trailing seconds part like ':00.0'
    df['time'] = df['time'].str.replace(r'\.\d+$', '', regex=True)
    # normalize blank-like values to NaN
    df.loc[df['time'].str.strip().isin(['', 'nan', 'None', 'NaN']) , 'time'] = np.nan
else:
    df['time'] = np.nan

# try combine into a kickoff timestamp when both present
df['kickoff'] = pd.to_datetime(
    df['date'].dt.strftime('%Y-%m-%d').fillna('') + ' ' + df['time'].fillna(''),
    errors='coerce'
)
print("Parsed dates: ", df['date'].notna().sum(), "kickoffs parsed:", df['kickoff'].notna().sum())


# CELL 4 — coerce numeric stat columns (remove commas/other noise) and drop rows missing FT goals
numeric_cols = [
    'fthg','ftag','hthg','htag','attendance',
    'hs','as','hst','ast','hhw','ahw','hc','ac','hf','af','hfkc','afkc','ho','ao','hy','ay','hr','ar'
]

for col in numeric_cols:
    if col in df.columns:
        # strip out non-digit and non-minus characters (handles commas)
        df[col] = pd.to_numeric(df[col].astype(str).str.replace(r'[^\d\-]', '', regex=True), errors='coerce')

# drop rows that lack final score (we can't transform these)
if 'fthg' in df.columns and 'ftag' in df.columns:
    before = len(df)
    df = df.dropna(subset=['fthg','ftag']).copy()
    after = len(df)
    print(f"Dropped {before - after} rows missing FTHG/FTAG. Rows remaining: {after}")
else:
    print("⚠️ fthg/ftag not both present — cannot drop missing final-score rows; check your inputs.")


    # CELL 5 — convert ints where appropriate (safe conversion)
for c in ['fthg','ftag','hthg','htag','hs','as','hst','ast','hhw','ahw','hc','ac','hf','af','hfkc','afkc','ho','ao','hy','ay','hr','ar']:
    if c in df.columns:
        df[c] = df[c].fillna(0).astype(int)

# attendance: if present, keep as int but allow large values
if 'attendance' in df.columns:
    df['attendance'] = df['attendance'].fillna(0).astype(int)
